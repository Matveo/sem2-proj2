import json
import os
from typing import Dict, Any

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
USER_SETTINGS = {}

def get_message(lang_code: str, key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –∫–æ–¥—É —è–∑—ã–∫–∞ –∏ –∫–ª—é—á—É
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–∫–∞–ª–∏–∑–∞—Ü–∏–∏
    locale_file = f"locales/{lang_code}.json"
      # –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if not os.path.exists(locale_file):
        locale_file = "locales/en.json"
    
    try:
        with open(locale_file, 'r', encoding='utf-8') as f:
            messages = json.load(f)
        result = messages.get(key, f"Message '{key}' not found")
        return result
    except FileNotFoundError:
        return f"Locale file not found for '{lang_code}'"
    except json.JSONDecodeError:
        return f"Invalid JSON in locale file for '{lang_code}'"

def get_user_language(user_id: int) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    """
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—Å—Ç—å –≤ –∫—ç—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ —è–∑—ã–∫
    if user_id in USER_SETTINGS and "language" in USER_SETTINGS[user_id]:
        return USER_SETTINGS[user_id]["language"]
    
    # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return "en"

def set_user_language(user_id: int, lang_code: str) -> bool:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    try:
        # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        if user_id not in USER_SETTINGS:
            USER_SETTINGS[user_id] = {}
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
        USER_SETTINGS[user_id]["language"] = lang_code
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        save_user_settings()
        print(f"–Ø–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {lang_code}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ —è–∑—ã–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
        return False

def get_user_translate_languages(user_id: int) -> Dict[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_id in USER_SETTINGS and "translate" in USER_SETTINGS[user_id]:
        return USER_SETTINGS[user_id]["translate"]
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —è–∑—ã–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
        "source": "auto",  # auto –¥–ª—è –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        "target": "en"     # –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    }

def set_user_translate_languages(user_id: int, source: str, target: str) -> None:
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if user_id not in USER_SETTINGS:
        USER_SETTINGS[user_id] = {}
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º –µ—Å–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç)
    USER_SETTINGS[user_id]["translate"] = {
        "source": source,
        "target": target
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
    save_user_settings()
    print(f"–Ø–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã: {source} -> {target}")

def swap_user_translate_languages(user_id: int) -> Dict[str, str]:
    """
    –ú–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏ —è–∑—ã–∫–∏ –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    languages = get_user_translate_languages(user_id)
    
    # –ï—Å–ª–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —è–∑—ã–∫ –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ, —Ç–æ –Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏
    if languages["source"] == "auto":
        return languages
    
    # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
    source, target = languages["target"], languages["source"]
    
    set_user_translate_languages(user_id, source, target)
    return {"source": source, "target": target}

def save_user_settings() -> None:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ñ–∞–π–ª
    """
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        os.makedirs("storage", exist_ok=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        with open("storage/user_settings.json", "w", encoding="utf-8") as f:
            json.dump(USER_SETTINGS, f, ensure_ascii=False, indent=2)
            
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {len(USER_SETTINGS)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    except Exception as e:
        print(f"Error saving user settings: {e}")

def load_user_settings() -> None:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞
    """
    global USER_SETTINGS
    
    try:
        if os.path.exists("storage/user_settings.json"):
            with open("storage/user_settings.json", "r", encoding="utf-8") as f:
                content = f.read().strip()
                if content:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –Ω–µ –ø—É—Å—Ç–æ–π
                    loaded_settings = json.loads(content)
                    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∫–ª—é—á–∏ - —ç—Ç–æ —Å—Ç—Ä–æ–∫–∏ (ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
                    USER_SETTINGS = {int(k) if k.isdigit() else k: v for k, v in loaded_settings.items()}
                else:
                    USER_SETTINGS = {}
        else:
            USER_SETTINGS = {}
            print("–§–∞–π–ª –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ—Ç—Å—è –Ω–æ–≤—ã–π")
    except json.JSONDecodeError as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        USER_SETTINGS = {}
    except Exception as e:
        print(f"Error loading user settings: {e}")
        USER_SETTINGS = {}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
load_user_settings()

def format_translation_history(history_items: list, user_lang: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    """
    if not history_items:
        return get_message(user_lang, "no_history")
    
    result = [get_message(user_lang, "history_message")]
    
    for i, item in enumerate(history_items, 1):
        original = item.get("original", "")
        translated = item.get("translated", "")
        from_lang = item.get("from_lang", "").upper()
        to_lang = item.get("to_lang", "").upper()
        
        entry = (
            f"{i}. <b>{original}</b>\n"
            f"üîÑ {from_lang} ‚û°Ô∏è {to_lang}\n"
            f"{translated}\n"
        )
        
        result.append(entry)
    
    return "\n".join(result)

def get_user_settings(user_id: int) -> Dict[str, Any]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    return USER_SETTINGS.get(user_id, {})

def clear_user_settings(user_id: int) -> bool:
    """
    –û—á–∏—â–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    if user_id in USER_SETTINGS:
        del USER_SETTINGS[user_id]
        save_user_settings()
        print(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω—ã")
        return True
    return False

def get_all_users_count() -> int:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    """
    return len(USER_SETTINGS)

def backup_user_settings(backup_file: str = "storage/user_settings_backup.json") -> bool:
    """
    –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    """
    try:
        os.makedirs("storage", exist_ok=True)
        with open(backup_file, "w", encoding="utf-8") as f:
            json.dump(USER_SETTINGS, f, ensure_ascii=False, indent=2)
        print(f"–†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å–æ–∑–¥–∞–Ω–∞: {backup_file}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        return False