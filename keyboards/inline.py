from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import Dict, List
import json

def help_inline_keyboard(lang_code="en"):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∫–æ–º–∞–Ω–¥—ã help
    """
    # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    button_text = {
        "en": ["üîÑ Translate", "üåê Language", "üìã History", "‚ÑπÔ∏è About", "üè† Main Menu"],
        "ru": ["üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "üåê –Ø–∑—ã–∫", "üìã –ò—Å—Ç–æ—Ä–∏—è", "‚ÑπÔ∏è –û –±–æ—Ç–µ", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    }
    
    texts = button_text.get(lang_code, button_text["en"])
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=texts[0], callback_data="translate"),
                InlineKeyboardButton(text=texts[1], callback_data="setlanguage")
            ],
            [
                InlineKeyboardButton(text=texts[2], callback_data="history"),
                InlineKeyboardButton(text=texts[3], callback_data="about")
            ],
            [
                InlineKeyboardButton(text=texts[4], callback_data="main_menu")
            ]
        ]
    )

def about_inline_keyboard(lang_code="en"):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ
    """
    back_text = "üîô Back to Help" if lang_code == "en" else "üîô –ù–∞–∑–∞–¥ –∫ –ø–æ–º–æ—â–∏"
    menu_text = "üè† Main Menu" if lang_code == "en" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=back_text, callback_data="help"),
                InlineKeyboardButton(text=menu_text, callback_data="main_menu")
            ]
        ]
    )

def main_menu_inline_keyboard(lang_code="en"):
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤–º–µ—Å—Ç–æ reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    """
    # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–æ–∫ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
    button_text = {
        "en": ["üîÑ Translate", "‚ùî Help", "üåê Change Language", "üìã History", "üéØ Target Language"],
        "ru": ["üîÑ –ü–µ—Ä–µ–≤–µ—Å—Ç–∏", "‚ùî –ü–æ–º–æ—â—å", "üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", "üìã –ò—Å—Ç–æ—Ä–∏—è", "üéØ –¶–µ–ª–µ–≤–æ–π —è–∑—ã–∫"]
    }
    
    texts = button_text.get(lang_code, button_text["en"])
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=texts[0], callback_data="translate"),
                InlineKeyboardButton(text=texts[1], callback_data="help")
            ],
            [
                InlineKeyboardButton(text=texts[2], callback_data="setlanguage"),
                InlineKeyboardButton(text=texts[3], callback_data="history")
            ],
            [
                InlineKeyboardButton(text=texts[4], callback_data="set_target_language")
            ]
        ]
    )

def choose_language_keyboard(languages: Dict, lang_code="en", action_prefix="lang", page=0, page_size=8):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    :param languages: –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤ {code: name}
    :param lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    :param action_prefix: –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: InlineKeyboardMarkup
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    sorted_languages = sorted(languages.items(), key=lambda x: x[1])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(sorted_languages) + page_size - 1) // page_size
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(sorted_languages))
    current_page_languages = sorted_languages[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ 2 –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
    keyboard = []
    row = []
    
    for i, (code, name) in enumerate(current_page_languages):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
        row.append(InlineKeyboardButton(
            text=name, 
            callback_data=f"{action_prefix}_{code}"
        ))
        
        # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
        if len(row) == 2 or i == len(current_page_languages) - 1:
            keyboard.append(row.copy())
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 0:
        prev_text = "‚óÄÔ∏è Prev" if lang_code == "en" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
        nav_row.append(InlineKeyboardButton(
            text=prev_text,
            callback_data=f"page_{action_prefix}_{page-1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_text = f"{page+1}/{total_pages}"
    nav_row.append(InlineKeyboardButton(
        text=page_text,
        callback_data="noop"  # –≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page < total_pages - 1:
        next_text = "Next ‚ñ∂Ô∏è" if lang_code == "en" else "–î–∞–ª–µ–µ ‚ñ∂Ô∏è"
        nav_row.append(InlineKeyboardButton(
            text=next_text,
            callback_data=f"page_{action_prefix}_{page+1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if total_pages > 1:
        keyboard.append(nav_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    bottom_row = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_text = "‚ùå Cancel" if lang_code == "en" else "‚ùå –û—Ç–º–µ–Ω–∞"
    bottom_row.append(InlineKeyboardButton(text=cancel_text, callback_data="cancel"))
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_text = "üè† Main Menu" if lang_code == "en" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    bottom_row.append(InlineKeyboardButton(text=menu_text, callback_data="main_menu"))
    
    keyboard.append(bottom_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def after_translation_keyboard(lang_code="en"):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –æ–ø—Ü–∏—è–º–∏ "–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –µ—â—ë" –∏ "–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"
    """
    from utils.formatters import get_message
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=get_message(lang_code, "translate_again"), 
                    callback_data="translate_again"
                ),
                InlineKeyboardButton(
                    text=get_message(lang_code, "back_to_menu"), 
                    callback_data="main_menu"
                )
            ]
        ]
    )

def history_keyboard(lang_code="en"):
    """
    –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–æ–≤
    """
    button_text = {
        "en": ["üßπ Clear History", "‚ùå Close", "üè† Main Menu"],
        "ru": ["üßπ –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", "‚ùå –ó–∞–∫—Ä—ã—Ç—å", "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
    }
    
    texts = button_text.get(lang_code, button_text["en"])
    
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text=texts[0], callback_data="clear_history"),
                InlineKeyboardButton(text=texts[1], callback_data="close")
            ],
            [
                InlineKeyboardButton(text=texts[2], callback_data="main_menu")
            ]
        ]
    )

def target_language_keyboard(languages: Dict, lang_code="en", page=0, page_size=8):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ü–µ–ª–µ–≤–æ–≥–æ —è–∑—ã–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    :param languages: –°–ª–æ–≤–∞—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —è–∑—ã–∫–æ–≤ {code: name}
    :param lang_code: –ö–æ–¥ —è–∑—ã–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    :param page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
    :param page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —è–∑—ã–∫–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    :return: InlineKeyboardMarkup
    """
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —è–∑—ã–∫–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
    sorted_languages = sorted(languages.items(), key=lambda x: x[1])
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (len(sorted_languages) + page_size - 1) // page_size
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    start_idx = page * page_size
    end_idx = min(start_idx + page_size, len(sorted_languages))
    current_page_languages = sorted_languages[start_idx:end_idx]
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏, –ø–æ 2 –≤ –∫–∞–∂–¥–æ–º —Ä—è–¥—É
    keyboard = []
    row = []
    
    for i, (code, name) in enumerate(current_page_languages):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º —è–∑—ã–∫–∞
        row.append(InlineKeyboardButton(
            text=name, 
            callback_data=f"target_{code}"
        ))
        
        # –ü–æ—Å–ª–µ –∫–∞–∂–¥–æ–π –≤—Ç–æ—Ä–æ–π –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –≤ –∫–æ–Ω—Ü–µ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π —Ä—è–¥
        if len(row) == 2 or i == len(current_page_languages) - 1:
            keyboard.append(row.copy())
            row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    nav_row = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page > 0:
        prev_text = "‚óÄÔ∏è Prev" if lang_code == "en" else "‚óÄÔ∏è –ù–∞–∑–∞–¥"
        nav_row.append(InlineKeyboardButton(
            text=prev_text,
            callback_data=f"page_target_{page-1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    page_text = f"{page+1}/{total_pages}"
    nav_row.append(InlineKeyboardButton(
        text=page_text,
        callback_data="noop"  # –≠—Ç–æ –∫–Ω–æ–ø–∫–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
    ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞" –µ—Å–ª–∏ –Ω–µ –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    if page < total_pages - 1:
        next_text = "Next ‚ñ∂Ô∏è" if lang_code == "en" else "–î–∞–ª–µ–µ ‚ñ∂Ô∏è"
        nav_row.append(InlineKeyboardButton(
            text=next_text,
            callback_data=f"page_target_{page+1}"
        ))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    if total_pages > 1:
        keyboard.append(nav_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –æ—Ç–º–µ–Ω—ã –∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    bottom_row = []
    
    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
    cancel_text = "‚ùå Cancel" if lang_code == "en" else "‚ùå –û—Ç–º–µ–Ω–∞"
    bottom_row.append(InlineKeyboardButton(text=cancel_text, callback_data="cancel"))
    
    # –ö–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    menu_text = "üè† Main Menu" if lang_code == "en" else "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
    bottom_row.append(InlineKeyboardButton(text=menu_text, callback_data="main_menu"))
    
    keyboard.append(bottom_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)