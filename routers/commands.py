from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
import json
import os

from states.language_state import LanguageState
from utils.logger import logger
from utils.formatters import get_message, get_user_language, format_translation_history, set_user_language, get_user_translate_languages
from keyboards.inline import help_inline_keyboard, about_inline_keyboard, main_menu_inline_keyboard, history_keyboard, choose_language_keyboard
from services.api_client import translate_text, get_languages
from services.history_storage import add_to_history, get_history, clear_history

def check_user_banned(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"""
    try:
        from routers.handlers.admin import is_user_banned
        return is_user_banned(user_id)
    except ImportError:
        return False

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_banned(user_id):
        await message.answer("üö´ You have been banned from using this bot. / –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /start")
    
    start_text = get_message(user_lang, "start_message")
    
    await message.answer(
        start_text,
        reply_markup=main_menu_inline_keyboard(user_lang)
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_banned(user_id):
        await message.answer("üö´ You have been banned from using this bot. / –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /help")
    
    help_text = get_message(user_lang, "help_message")
    
    await message.answer(
        help_text,
        reply_markup=help_inline_keyboard()
    )


@router.callback_query(F.data == "help")
async def callback_help(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Help"
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    help_text = get_message(user_lang, "help_message")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    
    await callback.message.edit_text(
        help_text,
        reply_markup=help_inline_keyboard(user_lang)
    )
    await callback.answer()


@router.message(Command("translate"))
async def cmd_translate(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /translate
    –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è FSM - –ø–æ–∫–∞ –¥–µ–ª–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /translate")
    translate_text_msg = get_message(user_lang, "translate_message")
    example_msg = get_message(user_lang, "translate_example")
    
    await message.answer(f"{translate_text_msg}\n\n{example_msg}")

@router.message(Command("setlanguage"))
async def cmd_setlanguage(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /setlanguage
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /setlanguage")
    
    setlang_text = get_message(user_lang, "setlanguage_message")
    await message.answer(
        setlang_text,
        reply_markup=main_menu_inline_keyboard(user_lang)
    )

@router.message(Command("history"))
async def cmd_history(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /history")
    
    user_history = get_history(user_id, limit=5)
    
    if user_history:
        history_text = get_message(user_lang, "history_message") + "\n\n"
        for i, translation in enumerate(user_history, 1):
            from_lang = translation.get('from_lang', translation.get('from', '–Ω–µ–∏–∑–≤.'))
            to_lang = translation.get('to_lang', translation.get('to', '–Ω–µ–∏–∑–≤.'))
            timestamp = translation.get('timestamp', '')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –µ—Å–ª–∏ –µ—Å—Ç—å
            date_str = ""
            if timestamp:
                try:
                    from datetime import datetime
                    dt = datetime.fromisoformat(timestamp)
                    date_str = f" ({dt.strftime('%d.%m %H:%M')})"
                except:
                    pass
            
            history_text += f"{i}. üîÑ {from_lang}‚Üí{to_lang}{date_str}\n"
            history_text += f"   üìù {translation['original']}\n"
            history_text += f"   ‚úÖ {translation['translated']}\n\n"    
    else:
        history_text = get_message(user_lang, "no_history")
    
    await message.answer(history_text)

@router.message(Command("clear_history"))
async def cmd_clear_history(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear_history
    –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    user_lang = get_user_language(user_id)
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥—É /clear_history")
    
    if clear_history(user_id):
        await message.answer(
            get_message(user_lang, "history_cleared"),
            reply_markup=main_menu_inline_keyboard(user_lang)
        )
    else:
        await message.answer(
            get_message(user_lang, "history_clear_error"),
            reply_markup=main_menu_inline_keyboard(user_lang)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è reply-–∫–Ω–æ–ø–æ–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.message(F.text == "English")
async def language_english(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤—ã–±—Ä–∞–ª –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_language(user_id, "en")
    
    await message.answer(
        get_message("en", "language_set"),
        reply_markup=main_menu_inline_keyboard("en")
    )

@router.message(F.text == "–†—É—Å—Å–∫–∏–π")
async def language_russian(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –≤—ã–±—Ä–∞–ª —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    set_user_language(user_id, "ru")
    
    await message.answer(
        get_message("ru", "language_set"),
        reply_markup=main_menu_inline_keyboard("ru")
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (–∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥)
@router.message(F.text & ~F.text.startswith('/'))
async def handle_text_translation(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏ —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    """
    user_id = message.from_user.id
    username = message.from_user.username or message.from_user.first_name
    text = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    if check_user_banned(user_id):
        await message.answer("üö´ You have been banned from using this bot. / –í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞.")
        return
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} (ID: {user_id}) –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞: '{text[:50]}...'")
    
    # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —è–∑—ã–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
    source_lang = "auto"
      # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª–µ–≤–æ–π —è–∑—ã–∫ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    translate_settings = get_user_translate_languages(user_id)
    target_lang = translate_settings["target"]
    
    # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
    user_lang = get_user_language(user_id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø–µ—Ä–µ–≤–æ–¥–∞
    processing_msg = await message.answer(get_message(user_lang, "processing"))
    
    try:
        # –í—ã–∑—ã–≤–∞–µ–º API –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
        translated = await translate_text(text, source_lang, target_lang)
        if translated:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response_text = f"üîÑ {source_lang.upper()} ‚Üí {target_lang.upper()}\n\n"
            response_text += f"{get_message(user_lang, 'original_text')}\n{text}\n\n"
            response_text += f"{get_message(user_lang, 'translated_text')}\n{translated}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            history_record = {
                "original": text,
                "translated": translated,
                "from_lang": source_lang,
                "to_lang": target_lang
            }
            
            add_to_history(user_id, history_record)
            logger.info(f"–ü–µ—Ä–µ–≤–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await processing_msg.delete()
            await message.answer(response_text, parse_mode="HTML")
            
        else:
            # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –Ω–µ —É–¥–∞–ª—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await processing_msg.delete()
            await message.answer(
                get_message(user_lang, "translation_error"),
                reply_markup=main_menu_inline_keyboard(user_lang)
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ: {e}")
        await processing_msg.delete()
        await message.answer(
            get_message(user_lang, "api_error"),
            reply_markup=main_menu_inline_keyboard(user_lang)
        )

@router.callback_query(F.data == "translate")
async def callback_translate(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "Translate"
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    await callback.message.edit_text(
        get_message(user_lang, "translate_message"),
        reply_markup=main_menu_inline_keyboard(user_lang)
    )
    await callback.answer()

@router.callback_query(F.data == "history")
async def callback_history(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ inline-–∫–Ω–æ–ø–∫–∏ "History"
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    user_history = get_history(user_id, limit=5)
    
    if user_history:
        history_text = format_translation_history(user_history, user_lang)
    else:
        history_text = get_message(user_lang, "no_history")
    
    await callback.message.edit_text(
        history_text,
        reply_markup=history_keyboard(user_lang)
    )
    await callback.answer()

@router.callback_query(F.data == "about")
async def callback_about(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "About"
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    
    about_text = "ü§ñ Translator Bot v1.0\n\nThis bot can translate text between different languages using AI translation services.\n\nDeveloped with aiogram 3 and Python."
    if user_lang == "ru":
        about_text = "ü§ñ –ë–æ—Ç-–ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ v1.0\n\n–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Ç–µ–∫—Å—Ç –º–µ–∂–¥—É —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ —è–∑—ã–∫–∞–º–∏, –∏—Å–ø–æ–ª—å–∑—É—è AI-—Å–µ—Ä–≤–∏—Å—ã –ø–µ—Ä–µ–≤–æ–¥–∞.\n\n–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º aiogram 3 –∏ Python."
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    
    await callback.message.edit_text(
        about_text,
        reply_markup=about_inline_keyboard(user_lang)
    )
    await callback.answer()


@router.callback_query(F.data == "main_menu")
async def callback_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "Main Menu"
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    await state.clear()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await callback.message.edit_text(
        get_message(user_lang, "select_action"),
        reply_markup=main_menu_inline_keyboard(user_lang)
    )
    await callback.answer()

@router.callback_query(F.data == "clear_history")
async def callback_clear_history(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏
    """
    user_id = callback.from_user.id
    user_lang = get_user_language(user_id)
    
    if clear_history(user_id):
        await callback.message.edit_text(
            get_message(user_lang, "history_cleared"),
            reply_markup=main_menu_inline_keyboard(user_lang)
        )
    else:
        await callback.message.edit_text(
            get_message(user_lang, "history_clear_error"),
            reply_markup=main_menu_inline_keyboard(user_lang)
        )
    await callback.answer()

@router.callback_query(F.data == "close")
async def callback_close(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
    """
    await callback.message.delete()
    await callback.answer()